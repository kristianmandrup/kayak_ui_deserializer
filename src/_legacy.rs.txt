
// pub struct Rect {
//     pub posx: f32,
//     pub posy: f32,
//     pub width: f32,
//     pub height: f32,
//     pub z_index: f32,
// }

// pub struct Space {
//     pub left: f32,
//     pub right: f32,
//     pub top: f32,
//     pub bottom: f32,
// }

// pub struct Size {
//     pub width: f32,
//     pub height: f32,
// }

// pub struct Layout {
//     /// width of the component
//     pub width: f32,
//     /// height of the component
//     pub height: f32,
//     /// x-coordinates of the component
//     pub x: f32,
//     /// y-coordinates of the component
//     pub y: f32,
//     /// z-coordinates of the component
//     pub z: f32,
// }

// pub struct BackgroundBundle {
//     pub background: Background,
//     pub styles: KStyle,
//     pub children: KChildren,
//     pub on_event: OnEvent,
//     pub widget_name: WidgetName,
// }

// pub struct KayakAppBundle {
//     pub app: KayakApp,
//     pub styles: KStyle,
//     pub children: KChildren,
//     pub widget_name: WidgetName,
// }


/// A generic widget
/// You can consider this to kind behave like a div in html
/// Accepts: KStyle, OnEvent, and KChildren.
// #[derive(Bundle)]
// pub struct ElementBundle {
//     pub element: Element,
//     pub styles: KStyle,
//     pub on_event: OnEvent,
//     pub children: KChildren,
//     pub widget_name: WidgetName,
// }

// pub struct TextBoxBundle {
//     pub text_box: TextBoxProps,
//     pub styles: KStyle,
//     pub on_event: OnEvent,
//     pub on_layout: OnLayout,
//     pub on_change: OnChange,
//     pub focusable: Focusable,
//     pub widget_name: WidgetName,
// }

// pub struct TextProps {
//     /// The string to display
//     pub content: String,
//     /// The name of the font to use
//     ///
//     /// The given font must already be loaded into the [`KayakContext`](kayak_core::KayakContext)
//     pub font: Option<String>,
//     /// The height of a line of text (currently in pixels)
//     pub line_height: Option<f32>,
//     /// If true, displays the default text cursor when hovered.
//     ///
//     /// This _will_ override the `cursor` style.
//     pub show_cursor: bool,
//     /// The font size (in pixels)
//     ///
//     /// Negative values have no effect
//     pub size: f32,
//     /// Text alignment.
//     pub alignment: Alignment,
//     /// Custom styles to pass in.
//     pub user_styles: KStyle,
//     /// Basic word wrapping.
//     /// Defautls to true
//     pub word_wrap: bool,
// }

// pub struct TextureAtlasProps {
//     /// The handle to image
//     pub handle: Handle<Image>,
//     /// The position of the tile (in pixels)
//     pub position: Vec2,
//     /// The size of the tile (in pixels)
//     pub tile_size: Vec2,
// }

// pub struct KWindow {
//     /// If true, allows the window to be draggable by its title bar
//     pub draggable: bool,
//     /// The initial position at which to display the window in pixels
//     pub initial_position: Vec2,
//     /// The size of the window in pixels
//     pub size: Vec2,
//     /// The text to display in the window's title bar
//     pub title: String,
//     /// Styles for the main window quad.
//     pub window_styles: KStyle,
//     /// A set of styles to apply to the children element wrapper.
//     pub children_styles: KStyle,
// }



// pub struct KImage(pub Handle<bevy::prelude::Image>);
// pub struct KImageBundle {
//     pub image: KImage,
//     pub styles: KStyle,
//     pub widget_name: WidgetName,
// }



// #[derive(Bundle)]
// pub struct ClipBundle {
//     pub clip: Clip,
//     pub styles: KStyle,
//     pub children: KChildren,
//     pub widget_name: WidgetName,
// }


// pub struct KButton {
//     pub text: String,
//     pub user_styles: KStyle,
// }

// /// Default button widget
// /// Accepts an OnEvent component
// #[derive(Bundle)]
// pub struct KButtonBundle {
//     pub button: KButton,
//     pub styles: KStyle,
//     pub on_event: OnEvent,
//     pub widget_name: WidgetName,
// }




// KChildren
// inner: Vec<Entity>

// - TextProps
//     - `content`: The string to display
//     - `font`: The name of the font to use 
//     - `line_height`: The height of a line of text (currently in pixels). Defaults to font size * 1.2 which is the firefox default method of calculating line height.
//     - `show_cursor`: If true, displays the default text cursor when hovered.
//     - `size`: The font size (in pixels)
//     - `alignment`: Text alignment.
//     - `user_styles`: Specific styles applied directly to the text itself.
//     - `word_wrap`: Wraps the words if said text would overflow it's parent.



use crate::ui_parser::{build_text_widget, UiNode};

// use crate::morph::build_world;

pub type OptStr = Option<String>;
// type OptNum = Option<u32>;

#[derive(Debug, Serialize, Deserialize, Clone)]
pub struct UiParseNode {
   #[serde(skip_serializing_if = "Option::is_none")]
   pub alignment: OptStr,
   pub asset_path: OptStr,
   pub color: OptStr,
   pub background_color: OptStr,
   pub border: OptStr,
   pub border_color: OptStr,
   pub border_radius: OptStr,
   pub col_between: OptStr,
   pub content: OptStr,
   pub cursor: OptStr,   
   pub layout_type: OptStr,
   pub max_height: OptStr,
   pub max_width: OptStr,
   pub min_height: OptStr,
   pub min_width: OptStr,
   pub offset: OptStr,
   pub padding: OptStr,
   pub padding_top: OptStr,
   pub padding_bottom: OptStr,
   pub padding_left: OptStr,
   pub padding_right: OptStr,
   pub row_between: OptStr,
   pub z_index: OptStr,
   pub posx: OptStr,
   pub posy: OptStr,
   pub render_command: OptStr,
   pub word_wrap: OptStr,
    
   // corner
   pub top_left: OptStr,
   pub top_right: OptStr,
   pub bottom_left: OptStr,
   pub bottom_right: OptStr,

   // edge
   pub top: OptStr,
   pub left: OptStr,
   pub right: OptStr,
   pub bottom: OptStr,

   pub text: OptStr,
   pub font: OptStr,
   pub font_size: OptStr,
   pub line_height: OptStr,
   pub show_cursor: OptStr,
   pub size: OptStr,
   pub width: OptStr,
   pub height: OptStr,
   pub child_space: OptStr,
   pub position_type: OptStr,
} 

// pub fn parse_ui() -> Result<UiNode, &'static str> {

//     let ui_json = r#"
//     {
//         "width": "2 px",
//         "height": "5 px"
//     }
//     "#;    

//     let ui = serde_json::from_str(ui_json).unwrap();
//     println!("ui {:#?}", ui);
//     build_text_widget(ui)
// }
